{
  "doc": " Module: `staked_wal`\n\n Implements the `StakedWal` functionality - a staked WAL is an object that\n represents a staked amount of WALs in a staking pool. It is created in the\n `staking_pool` on staking and can be split, joined, and burned. The burning\n is performed via the `withdraw_stake` method in the `staking_pool`.",
  "immediate_dependencies": [
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000000",
      "name": "wal"
    },
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000000",
      "name": "walrus_context"
    },
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000002",
      "name": "balance"
    },
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000002",
      "name": "object"
    },
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000002",
      "name": "tx_context"
    }
  ],
  "attributes": [],
  "functions": {
    "mint": {
      "source_index": 0,
      "index": 0,
      "doc": " Protected method to create a new staked WAL.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "node_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000002",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "principal",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000002",
                "name": "balance"
              },
              "name": "Balance",
              "type_arguments": [
                {
                  "Datatype": {
                    "module": {
                      "address": "0000000000000000000000000000000000000000000000000000000000000000",
                      "name": "wal"
                    },
                    "name": "WAL",
                    "type_arguments": []
                  }
                }
              ]
            }
          }
        },
        {
          "name": "activation_epoch",
          "type_": "u32"
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000000",
              "name": "staked_wal"
            },
            "name": "StakedWal",
            "type_arguments": []
          }
        }
      ]
    },
    "into_balance": {
      "source_index": 1,
      "index": 1,
      "doc": " Burns the staked WAL and returns the `principal`.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "sw",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000000",
                "name": "staked_wal"
              },
              "name": "StakedWal",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000002",
              "name": "balance"
            },
            "name": "Balance",
            "type_arguments": [
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000000",
                    "name": "wal"
                  },
                  "name": "WAL",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ]
    },
    "set_withdrawing": {
      "source_index": 2,
      "index": 2,
      "doc": " Sets the staked WAL state to `Withdrawing`",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "sw",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000000",
                    "name": "staked_wal"
                  },
                  "name": "StakedWal",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "withdraw_epoch",
          "type_": "u32"
        }
      ],
      "return_": []
    },
    "can_withdraw_early": {
      "source_index": 3,
      "index": 3,
      "doc": " Checks if the staked WAL can be withdrawn directly.\n\n The staked WAL can be withdrawn early if:\n - activation epoch is current epoch + 2\n - activation epoch is current epoch + 1 and !node_in_next_committee\n   (or committee not selected yet)",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "sw",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000000",
                    "name": "staked_wal"
                  },
                  "name": "StakedWal",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "node_in_next_committee",
          "type_": "bool"
        },
        {
          "name": "wctx",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000000",
                    "name": "walrus_context"
                  },
                  "name": "WalrusContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "node_id": {
      "source_index": 4,
      "index": 4,
      "doc": " Returns the `node_id` of the staked WAL.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "sw",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000000",
                    "name": "staked_wal"
                  },
                  "name": "StakedWal",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000002",
              "name": "object"
            },
            "name": "ID",
            "type_arguments": []
          }
        }
      ]
    },
    "value": {
      "source_index": 5,
      "index": 5,
      "doc": " Returns the `principal` of the staked WAL. Called `value` to be consistent\n with `Coin`.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "sw",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000000",
                    "name": "staked_wal"
                  },
                  "name": "StakedWal",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "u64"
      ]
    },
    "activation_epoch": {
      "source_index": 6,
      "index": 6,
      "doc": " Returns the `activation_epoch` of the staked WAL.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "sw",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000000",
                    "name": "staked_wal"
                  },
                  "name": "StakedWal",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "u32"
      ]
    },
    "is_staked": {
      "source_index": 7,
      "index": 7,
      "doc": " Returns true if the staked WAL is in the `Staked` state.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "sw",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000000",
                    "name": "staked_wal"
                  },
                  "name": "StakedWal",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "is_withdrawing": {
      "source_index": 8,
      "index": 8,
      "doc": " Checks whether the staked WAL is in the `Withdrawing` state.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "sw",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000000",
                    "name": "staked_wal"
                  },
                  "name": "StakedWal",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "withdraw_epoch": {
      "source_index": 9,
      "index": 9,
      "doc": " Returns the `withdraw_epoch` of the staked WAL if it is in the `Withdrawing`.\n Aborts otherwise.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "sw",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000000",
                    "name": "staked_wal"
                  },
                  "name": "StakedWal",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "u32"
      ]
    },
    "join": {
      "source_index": 10,
      "index": 10,
      "doc": " Joins the staked WAL with another staked WAL, adding the `principal` of the\n `other` staked WAL to the current staked WAL.\n\n Aborts if the `node_id` or `activation_epoch` of the staked WALs do not match.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "sw",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000000",
                    "name": "staked_wal"
                  },
                  "name": "StakedWal",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "other",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000000",
                "name": "staked_wal"
              },
              "name": "StakedWal",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": []
    },
    "split": {
      "source_index": 11,
      "index": 11,
      "doc": " Splits the staked WAL into two parts, one with the `amount` and the other\n with the remaining `principal`. The `node_id`, `activation_epoch` are the\n same for both the staked WALs.\n\n Aborts if the `amount` is greater than the `principal` of the staked WAL.\n Aborts if the `amount` is zero.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "sw",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000000",
                    "name": "staked_wal"
                  },
                  "name": "StakedWal",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "amount",
          "type_": "u64"
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000000",
              "name": "staked_wal"
            },
            "name": "StakedWal",
            "type_arguments": []
          }
        }
      ]
    }
  },
  "structs": {
    "StakedWal": {
      "index": 0,
      "doc": " Represents a staked WAL, does not store the `Balance` inside, but uses\n `u64` to represent the staked amount. Behaves similarly to `Balance` and\n `Coin` providing methods to `split` and `join`.",
      "attributes": [],
      "abilities": [
        "Key",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "id": {
            "index": 0,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "object"
                },
                "name": "UID",
                "type_arguments": []
              }
            }
          },
          "state": {
            "index": 1,
            "doc": " Whether the staked WAL is active or withdrawing.",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000000",
                  "name": "staked_wal"
                },
                "name": "StakedWalState",
                "type_arguments": []
              }
            }
          },
          "node_id": {
            "index": 2,
            "doc": " ID of the staking pool.",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "principal": {
            "index": 3,
            "doc": " The staked amount.",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "balance"
                },
                "name": "Balance",
                "type_arguments": [
                  {
                    "Datatype": {
                      "module": {
                        "address": "0000000000000000000000000000000000000000000000000000000000000000",
                        "name": "wal"
                      },
                      "name": "WAL",
                      "type_arguments": []
                    }
                  }
                ]
              }
            }
          },
          "activation_epoch": {
            "index": 4,
            "doc": " The Walrus epoch when the staked WAL was activated.",
            "type_": "u32"
          }
        }
      }
    }
  },
  "enums": {
    "StakedWalState": {
      "index": 0,
      "doc": " The state of the staked WAL. It can be either `Staked` or `Withdrawing`.\n The `Withdrawing` state contains the epoch when the staked WAL can be\n withdrawn.",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "variants": {
        "Staked": {
          "index": 0,
          "doc": null,
          "fields": {
            "positional_fields": false,
            "fields": {}
          }
        },
        "Withdrawing": {
          "index": 1,
          "doc": null,
          "fields": {
            "positional_fields": false,
            "fields": {
              "withdraw_epoch": {
                "index": 0,
                "doc": null,
                "type_": "u32"
              }
            }
          }
        }
      }
    }
  }
}