{
  "doc": " Module to manage Walrus contract upgrades.\n\n This allows upgrading the contract with a quorum of storage nodes or using an emergency upgrade\n capability.\n\n Requiring a quorum instead of a simple majority guarantees that (i) a majority of honest nodes\n (by weight) have voted for the upgrade, and (ii) that an upgrade cannot be blocked solely by\n byzantine nodes.",
  "immediate_dependencies": [
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000000",
      "name": "auth"
    },
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000000",
      "name": "events"
    },
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000000",
      "name": "staking"
    },
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000000",
      "name": "system"
    },
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000001",
      "name": "vector"
    },
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000002",
      "name": "object"
    },
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000002",
      "name": "package"
    },
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000002",
      "name": "table"
    },
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000002",
      "name": "transfer"
    },
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000002",
      "name": "tx_context"
    },
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000002",
      "name": "vec_set"
    }
  ],
  "attributes": [],
  "functions": {
    "new": {
      "source_index": 0,
      "index": 0,
      "doc": " Create a new upgrade manager.\n\n This is called from the `init::initialize_walrus` function and will\n create a unique `UpgradeManager` and `EmergencyUpgradeCap` object.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "cap",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000002",
                "name": "package"
              },
              "name": "UpgradeCap",
              "type_arguments": []
            }
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000000",
              "name": "upgrade"
            },
            "name": "EmergencyUpgradeCap",
            "type_arguments": []
          }
        }
      ]
    },
    "vote_for_upgrade": {
      "source_index": 1,
      "index": 1,
      "doc": " Vote for an upgrade given the digest of the package to upgrade to.\n\n This will create a new upgrade proposal if none exists for the given digest.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000000",
                    "name": "upgrade"
                  },
                  "name": "UpgradeManager",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "staking",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000000",
                    "name": "staking"
                  },
                  "name": "Staking",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "auth",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000000",
                "name": "auth"
              },
              "name": "Authenticated",
              "type_arguments": []
            }
          }
        },
        {
          "name": "node_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000002",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "digest",
          "type_": {
            "vector": "u8"
          }
        }
      ],
      "return_": []
    },
    "authorize_upgrade": {
      "source_index": 2,
      "index": 2,
      "doc": " Authorizes an upgrade that has reached quorum.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000000",
                    "name": "upgrade"
                  },
                  "name": "UpgradeManager",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "staking",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000000",
                    "name": "staking"
                  },
                  "name": "Staking",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "digest",
          "type_": {
            "vector": "u8"
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000002",
              "name": "package"
            },
            "name": "UpgradeTicket",
            "type_arguments": []
          }
        }
      ]
    },
    "authorize_emergency_upgrade": {
      "source_index": 3,
      "index": 3,
      "doc": " Authorizes an upgrade using the emergency upgrade cap.\n\n This should be used sparingly and once walrus has a healthy community and governance,\n the EmergencyUpgradeCap should be burned.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "upgrade_manager",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000000",
                    "name": "upgrade"
                  },
                  "name": "UpgradeManager",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "emergency_upgrade_cap",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000000",
                    "name": "upgrade"
                  },
                  "name": "EmergencyUpgradeCap",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "digest",
          "type_": {
            "vector": "u8"
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000002",
              "name": "package"
            },
            "name": "UpgradeTicket",
            "type_arguments": []
          }
        }
      ]
    },
    "commit_upgrade": {
      "source_index": 4,
      "index": 4,
      "doc": " Commits an upgrade and sets the new package id in the staking and system objects.\n\n After committing an upgrade, the staking and system objects should be migrated\n using the [`package::migrate`] function to emit an event that informs all storage nodes\n and prevent previous package versions from being used.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "upgrade_manager",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000000",
                    "name": "upgrade"
                  },
                  "name": "UpgradeManager",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "staking",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000000",
                    "name": "staking"
                  },
                  "name": "Staking",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "system",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000000",
                    "name": "system"
                  },
                  "name": "System",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "receipt",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000002",
                "name": "package"
              },
              "name": "UpgradeReceipt",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": []
    },
    "cleanup_upgrade_proposals": {
      "source_index": 5,
      "index": 5,
      "doc": " Cleans up the upgrade proposals table.\n\n Deletes all proposals from past epochs and versions that are lower than the current version.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000000",
                    "name": "upgrade"
                  },
                  "name": "UpgradeManager",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "staking",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000000",
                    "name": "staking"
                  },
                  "name": "Staking",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "proposals",
          "type_": {
            "vector": {
              "vector": "u8"
            }
          }
        }
      ],
      "return_": []
    },
    "burn_emergency_upgrade_cap": {
      "source_index": 6,
      "index": 6,
      "doc": " Burns the emergency upgrade cap.\n\n This will prevent any further upgrades using the `EmergencyUpgradeCap` and will\n make upgrades fully reliant on quorum-based governance.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "emergency_upgrade_cap",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000000",
                "name": "upgrade"
              },
              "name": "EmergencyUpgradeCap",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": []
    },
    "fresh_proposal": {
      "source_index": 7,
      "index": 7,
      "doc": " Creates a new upgrade proposal.\n\n This will emit an event that signals that a new upgrade proposal has been created.",
      "attributes": [],
      "visibility": "Private",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "epoch",
          "type_": "u32"
        },
        {
          "name": "digest",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000000",
                "name": "upgrade"
              },
              "name": "PackageDigest",
              "type_arguments": []
            }
          }
        },
        {
          "name": "version",
          "type_": "u64"
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000000",
              "name": "upgrade"
            },
            "name": "UpgradeProposal",
            "type_arguments": []
          }
        }
      ]
    },
    "add_vote": {
      "source_index": 8,
      "index": 8,
      "doc": " Adds a vote to an upgrade proposal.",
      "attributes": [],
      "visibility": "Private",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "proposal",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000000",
                    "name": "upgrade"
                  },
                  "name": "UpgradeProposal",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "node_id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000002",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "weight",
          "type_": "u16"
        }
      ],
      "return_": []
    },
    "package_digest": {
      "source_index": 9,
      "index": 18446744073709551615,
      "doc": " Creates a new package digest given a byte vector.\n\n Aborts if the digest is not 32 bytes long.",
      "attributes": [],
      "visibility": "Private",
      "entry": false,
      "macro_": true,
      "type_parameters": [],
      "parameters": [
        {
          "name": "$digest",
          "type_": {
            "vector": "u8"
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000000",
              "name": "upgrade"
            },
            "name": "PackageDigest",
            "type_arguments": []
          }
        }
      ]
    }
  },
  "structs": {
    "PackageDigest": {
      "index": 0,
      "doc": " Newtype for package digests, ensures that the digest is always 32 bytes long.",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": true,
        "fields": {
          "pos0": {
            "index": 0,
            "doc": null,
            "type_": {
              "vector": "u8"
            }
          }
        }
      }
    },
    "UpgradeProposal": {
      "index": 1,
      "doc": " An upgrade proposal containing the digest of the package to upgrade to and the votes on the\n proposal.",
      "attributes": [],
      "abilities": [
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "epoch": {
            "index": 0,
            "doc": " The epoch in which the proposal was created.\n The upgrade must be performed in the same epoch.",
            "type_": "u32"
          },
          "digest": {
            "index": 1,
            "doc": " The digest of the package to upgrade to.",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000000",
                  "name": "upgrade"
                },
                "name": "PackageDigest",
                "type_arguments": []
              }
            }
          },
          "version": {
            "index": 2,
            "doc": " The version of the package to upgrade to.\n This allows to easily clean up old proposals.",
            "type_": "u64"
          },
          "voting_weight": {
            "index": 3,
            "doc": " The voting weight of the proposal.",
            "type_": "u16"
          },
          "voters": {
            "index": 4,
            "doc": " The node IDs that have voted for this proposal.\n Note: the number of nodes in the committee is capped, so we can use a VecSet.",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "vec_set"
                },
                "name": "VecSet",
                "type_arguments": [
                  {
                    "Datatype": {
                      "module": {
                        "address": "0000000000000000000000000000000000000000000000000000000000000002",
                        "name": "object"
                      },
                      "name": "ID",
                      "type_arguments": []
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "UpgradeManager": {
      "index": 2,
      "doc": " The upgrade manager object.\n\n This object contains the upgrade cap for the package and is used to authorize upgrades.",
      "attributes": [],
      "abilities": [
        "Key"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "id": {
            "index": 0,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "object"
                },
                "name": "UID",
                "type_arguments": []
              }
            }
          },
          "cap": {
            "index": 1,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "package"
                },
                "name": "UpgradeCap",
                "type_arguments": []
              }
            }
          },
          "upgrade_proposals": {
            "index": 2,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "table"
                },
                "name": "Table",
                "type_arguments": [
                  {
                    "Datatype": {
                      "module": {
                        "address": "0000000000000000000000000000000000000000000000000000000000000000",
                        "name": "upgrade"
                      },
                      "name": "PackageDigest",
                      "type_arguments": []
                    }
                  },
                  {
                    "Datatype": {
                      "module": {
                        "address": "0000000000000000000000000000000000000000000000000000000000000000",
                        "name": "upgrade"
                      },
                      "name": "UpgradeProposal",
                      "type_arguments": []
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "EmergencyUpgradeCap": {
      "index": 3,
      "doc": " A capability that allows upgrades to be performed without quorum.\n\n This is intended for emergency use and should be burned once the community has matured.",
      "attributes": [],
      "abilities": [
        "Key",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "id": {
            "index": 0,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "object"
                },
                "name": "UID",
                "type_arguments": []
              }
            }
          },
          "upgrade_manager_id": {
            "index": 1,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    }
  },
  "enums": {}
}