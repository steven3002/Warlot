{
  "doc": " A bag is a heterogeneous map-like collection. The collection is similar to `sui::table` in that\n its keys and values are not stored within the `Bag` value, but instead are stored using Sui's\n object system. The `Bag` struct acts only as a handle into the object system to retrieve those\n keys and values.\n Note that this means that `Bag` values with exactly the same key-value mapping will not be\n equal, with `==`, at runtime. For example\n ```\n let bag1 = bag::new();\n let bag2 = bag::new();\n bag::add(&mut bag1, 0, false);\n bag::add(&mut bag1, 1, true);\n bag::add(&mut bag2, 0, false);\n bag::add(&mut bag2, 1, true);\n // bag1 does not equal bag2, despite having the same entries\n assert!(&bag1 != &bag2);\n ```\n At it's core, `sui::bag` is a wrapper around `UID` that allows for access to\n `sui::dynamic_field` while preventing accidentally stranding field values. A `UID` can be\n deleted, even if it has dynamic fields associated with it, but a bag, on the other hand, must be\n empty to be destroyed.",
  "immediate_dependencies": [
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000002",
      "name": "dynamic_field"
    },
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000002",
      "name": "object"
    },
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000002",
      "name": "tx_context"
    }
  ],
  "attributes": [],
  "functions": {
    "new": {
      "source_index": 0,
      "index": 0,
      "doc": " Creates a new, empty bag",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000002",
              "name": "bag"
            },
            "name": "Bag",
            "type_arguments": []
          }
        }
      ]
    },
    "add": {
      "source_index": 1,
      "index": 1,
      "doc": " Adds a key-value pair to the bag `bag: &mut Bag`\n Aborts with `sui::dynamic_field::EFieldAlreadyExists` if the bag already has an entry with\n that key `k: K`.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "K",
          "constraints": [
            "Copy",
            "Drop",
            "Store"
          ]
        },
        {
          "name": "V",
          "constraints": [
            "Store"
          ]
        }
      ],
      "parameters": [
        {
          "name": "bag",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "bag"
                  },
                  "name": "Bag",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "k",
          "type_": {
            "NamedTypeParameter": "K"
          }
        },
        {
          "name": "v",
          "type_": {
            "NamedTypeParameter": "V"
          }
        }
      ],
      "return_": []
    },
    "borrow": {
      "source_index": 2,
      "index": 2,
      "doc": " Immutable borrows the value associated with the key in the bag `bag: &Bag`.\n Aborts with `sui::dynamic_field::EFieldDoesNotExist` if the bag does not have an entry with\n that key `k: K`.\n Aborts with `sui::dynamic_field::EFieldTypeMismatch` if the bag has an entry for the key, but\n the value does not have the specified type.",
      "attributes": [
        {
          "Parameterized": [
            "syntax",
            [
              {
                "Name": "index"
              }
            ]
          ]
        }
      ],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "K",
          "constraints": [
            "Copy",
            "Drop",
            "Store"
          ]
        },
        {
          "name": "V",
          "constraints": [
            "Store"
          ]
        }
      ],
      "parameters": [
        {
          "name": "bag",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "bag"
                  },
                  "name": "Bag",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "k",
          "type_": {
            "NamedTypeParameter": "K"
          }
        }
      ],
      "return_": [
        {
          "Reference": [
            false,
            {
              "NamedTypeParameter": "V"
            }
          ]
        }
      ]
    },
    "borrow_mut": {
      "source_index": 3,
      "index": 3,
      "doc": " Mutably borrows the value associated with the key in the bag `bag: &mut Bag`.\n Aborts with `sui::dynamic_field::EFieldDoesNotExist` if the bag does not have an entry with\n that key `k: K`.\n Aborts with `sui::dynamic_field::EFieldTypeMismatch` if the bag has an entry for the key, but\n the value does not have the specified type.",
      "attributes": [
        {
          "Parameterized": [
            "syntax",
            [
              {
                "Name": "index"
              }
            ]
          ]
        }
      ],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "K",
          "constraints": [
            "Copy",
            "Drop",
            "Store"
          ]
        },
        {
          "name": "V",
          "constraints": [
            "Store"
          ]
        }
      ],
      "parameters": [
        {
          "name": "bag",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "bag"
                  },
                  "name": "Bag",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "k",
          "type_": {
            "NamedTypeParameter": "K"
          }
        }
      ],
      "return_": [
        {
          "Reference": [
            true,
            {
              "NamedTypeParameter": "V"
            }
          ]
        }
      ]
    },
    "remove": {
      "source_index": 4,
      "index": 4,
      "doc": " Mutably borrows the key-value pair in the bag `bag: &mut Bag` and returns the value.\n Aborts with `sui::dynamic_field::EFieldDoesNotExist` if the bag does not have an entry with\n that key `k: K`.\n Aborts with `sui::dynamic_field::EFieldTypeMismatch` if the bag has an entry for the key, but\n the value does not have the specified type.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "K",
          "constraints": [
            "Copy",
            "Drop",
            "Store"
          ]
        },
        {
          "name": "V",
          "constraints": [
            "Store"
          ]
        }
      ],
      "parameters": [
        {
          "name": "bag",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "bag"
                  },
                  "name": "Bag",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "k",
          "type_": {
            "NamedTypeParameter": "K"
          }
        }
      ],
      "return_": [
        {
          "NamedTypeParameter": "V"
        }
      ]
    },
    "contains": {
      "source_index": 5,
      "index": 5,
      "doc": " Returns true iff there is an value associated with the key `k: K` in the bag `bag: &Bag`",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "K",
          "constraints": [
            "Copy",
            "Drop",
            "Store"
          ]
        }
      ],
      "parameters": [
        {
          "name": "bag",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "bag"
                  },
                  "name": "Bag",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "k",
          "type_": {
            "NamedTypeParameter": "K"
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "contains_with_type": {
      "source_index": 6,
      "index": 6,
      "doc": " Returns true iff there is an value associated with the key `k: K` in the bag `bag: &Bag`\n with an assigned value of type `V`",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "K",
          "constraints": [
            "Copy",
            "Drop",
            "Store"
          ]
        },
        {
          "name": "V",
          "constraints": [
            "Store"
          ]
        }
      ],
      "parameters": [
        {
          "name": "bag",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "bag"
                  },
                  "name": "Bag",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "k",
          "type_": {
            "NamedTypeParameter": "K"
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "length": {
      "source_index": 7,
      "index": 7,
      "doc": " Returns the size of the bag, the number of key-value pairs",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "bag",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "bag"
                  },
                  "name": "Bag",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "u64"
      ]
    },
    "is_empty": {
      "source_index": 8,
      "index": 8,
      "doc": " Returns true iff the bag is empty (if `length` returns `0`)",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "bag",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "bag"
                  },
                  "name": "Bag",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "destroy_empty": {
      "source_index": 9,
      "index": 9,
      "doc": " Destroys an empty bag\n Aborts with `EBagNotEmpty` if the bag still contains values",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "bag",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000002",
                "name": "bag"
              },
              "name": "Bag",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": []
    }
  },
  "structs": {
    "Bag": {
      "index": 0,
      "doc": null,
      "attributes": [],
      "abilities": [
        "Key",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "id": {
            "index": 0,
            "doc": " the ID of this bag",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "object"
                },
                "name": "UID",
                "type_arguments": []
              }
            }
          },
          "size": {
            "index": 1,
            "doc": " the number of key-value pairs in the bag",
            "type_": "u64"
          }
        }
      }
    }
  },
  "enums": {}
}