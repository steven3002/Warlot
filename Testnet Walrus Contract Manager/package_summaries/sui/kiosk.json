{
  "doc": " Kiosk is a primitive for building safe, decentralized and trustless trading\n experiences. It allows storing and trading any types of assets as long as\n the creator of these assets implements a `TransferPolicy` for them.\n\n ### Principles and philosophy:\n\n - Kiosk provides guarantees of \"true ownership\"; - just like single owner\n objects, assets stored in the Kiosk can only be managed by the Kiosk owner.\n Only the owner can `place`, `take`, `list`, perform any other actions on\n assets in the Kiosk.\n\n - Kiosk aims to be generic - allowing for a small set of default behaviors\n and not imposing any restrictions on how the assets can be traded. The only\n default scenario is a `list` + `purchase` flow; any other trading logic can\n be implemented on top using the `list_with_purchase_cap` (and a matching\n `purchase_with_cap`) flow.\n\n - For every transaction happening with a third party a `TransferRequest` is\n created - this way creators are fully in control of the trading experience.\n\n ### Asset states in the Kiosk:\n\n - `placed` -  An asset is `place`d into the Kiosk and can be `take`n out by\n the Kiosk owner; it's freely tradable and modifiable via the `borrow_mut`\n and `borrow_val` functions.\n\n - `locked` - Similar to `placed` except that `take` is disabled and the only\n way to move the asset out of the Kiosk is to `list` it or\n `list_with_purchase_cap` therefore performing a trade (issuing a\n `TransferRequest`). The check on the `lock` function makes sure that the\n `TransferPolicy` exists to not lock the item in a `Kiosk` forever.\n\n - `listed` - A `place`d or a `lock`ed item can be `list`ed for a fixed price\n allowing anyone to `purchase` it from the Kiosk. While listed, an item can\n not be taken or modified. However, an immutable borrow via `borrow` call is\n still available. The `delist` function returns the asset to the previous\n state.\n\n - `listed_exclusively` - An item is listed via the `list_with_purchase_cap`\n function (and a `PurchaseCap` is created). While listed this way, an item\n can not be `delist`-ed unless a `PurchaseCap` is returned. All actions\n available at this item state require a `PurchaseCap`:\n\n 1. `purchase_with_cap` - to purchase the item for a price equal or higher\n than the `min_price` set in the `PurchaseCap`.\n 2. `return_purchase_cap` - to return the `PurchaseCap` and return the asset\n into the previous state.\n\n When an item is listed exclusively it cannot be modified nor taken and\n losing a `PurchaseCap` would lock the item in the Kiosk forever. Therefore,\n it is recommended to only use `PurchaseCap` functionality in trusted\n applications and not use it for direct trading (eg sending to another\n account).\n\n ### Using multiple Transfer Policies for different \"tracks\":\n\n Every `purchase` or `purchase_with_purchase_cap` creates a `TransferRequest`\n hot potato which must be resolved in a matching `TransferPolicy` for the\n transaction to pass. While the default scenario implies that there should be\n a single `TransferPolicy<T>` for `T`; it is possible to have multiple, each\n one having its own set of rules.\n\n ### Examples:\n\n - I create one `TransferPolicy` with \"Royalty Rule\" for everyone\n - I create a special `TransferPolicy` for bearers of a \"Club Membership\"\n object so they don't have to pay anything\n - I create and wrap a `TransferPolicy` so that players of my game can\n transfer items between `Kiosk`s in game without any charge (and maybe not\n even paying the price with a 0 SUI PurchaseCap)\n\n ```\n Kiosk -> (Item, TransferRequest)\n ... TransferRequest ------> Common Transfer Policy\n ... TransferRequest ------> In-game Wrapped Transfer Policy\n ... TransferRequest ------> Club Membership Transfer Policy\n ```\n\n See `transfer_policy` module for more details on how they function.",
  "immediate_dependencies": [
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000001",
      "name": "option"
    },
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000002",
      "name": "balance"
    },
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000002",
      "name": "coin"
    },
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000002",
      "name": "dynamic_field"
    },
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000002",
      "name": "dynamic_object_field"
    },
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000002",
      "name": "event"
    },
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000002",
      "name": "object"
    },
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000002",
      "name": "sui"
    },
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000002",
      "name": "transfer"
    },
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000002",
      "name": "transfer_policy"
    },
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000002",
      "name": "tx_context"
    }
  ],
  "attributes": [],
  "functions": {
    "default": {
      "source_index": 0,
      "index": 0,
      "doc": " Creates a new Kiosk in a default configuration: sender receives the\n `KioskOwnerCap` and becomes the Owner, the `Kiosk` is shared.",
      "attributes": [
        {
          "Parameterized": [
            "allow",
            [
              {
                "Parameterized": [
                  "lint",
                  [
                    {
                      "Name": "self_transfer"
                    }
                  ]
                ]
              }
            ]
          ]
        }
      ],
      "visibility": "Private",
      "entry": true,
      "type_parameters": [],
      "parameters": [
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": []
    },
    "new": {
      "source_index": 1,
      "index": 1,
      "doc": " Creates a new `Kiosk` with a matching `KioskOwnerCap`.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000002",
              "name": "kiosk"
            },
            "name": "Kiosk",
            "type_arguments": []
          }
        },
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000002",
              "name": "kiosk"
            },
            "name": "KioskOwnerCap",
            "type_arguments": []
          }
        }
      ]
    },
    "close_and_withdraw": {
      "source_index": 2,
      "index": 2,
      "doc": " Unpacks and destroys a Kiosk returning the profits (even if \"0\").\n Can only be performed by the bearer of the `KioskOwnerCap` in the\n case where there's no items inside and a `Kiosk` is not shared.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000002",
                "name": "kiosk"
              },
              "name": "Kiosk",
              "type_arguments": []
            }
          }
        },
        {
          "name": "cap",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000002",
                "name": "kiosk"
              },
              "name": "KioskOwnerCap",
              "type_arguments": []
            }
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000002",
              "name": "coin"
            },
            "name": "Coin",
            "type_arguments": [
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "sui"
                  },
                  "name": "SUI",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ]
    },
    "set_owner": {
      "source_index": 3,
      "index": 3,
      "doc": " Change the `owner` field to the transaction sender.\n The change is purely cosmetical and does not affect any of the\n basic kiosk functions unless some logic for this is implemented\n in a third party module.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "cap",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "KioskOwnerCap",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": []
    },
    "set_owner_custom": {
      "source_index": 4,
      "index": 4,
      "doc": " Update the `owner` field with a custom address. Can be used for\n implementing a custom logic that relies on the `Kiosk` owner.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "cap",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "KioskOwnerCap",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "owner",
          "type_": "address"
        }
      ],
      "return_": []
    },
    "place": {
      "source_index": 5,
      "index": 5,
      "doc": " Place any object into a Kiosk.\n Performs an authorization check to make sure only owner can do that.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": [
            "Key",
            "Store"
          ]
        }
      ],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "cap",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "KioskOwnerCap",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "item",
          "type_": {
            "NamedTypeParameter": "T"
          }
        }
      ],
      "return_": []
    },
    "lock": {
      "source_index": 6,
      "index": 6,
      "doc": " Place an item to the `Kiosk` and issue a `Lock` for it. Once placed this\n way, an item can only be listed either with a `list` function or with a\n `list_with_purchase_cap`.\n\n Requires policy for `T` to make sure that there's an issued `TransferPolicy`\n and the item can be sold, otherwise the asset might be locked forever.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": [
            "Key",
            "Store"
          ]
        }
      ],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "cap",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "KioskOwnerCap",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "_policy",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "transfer_policy"
                  },
                  "name": "TransferPolicy",
                  "type_arguments": [
                    {
                      "NamedTypeParameter": "T"
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "item",
          "type_": {
            "NamedTypeParameter": "T"
          }
        }
      ],
      "return_": []
    },
    "take": {
      "source_index": 7,
      "index": 7,
      "doc": " Take any object from the Kiosk.\n Performs an authorization check to make sure only owner can do that.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": [
            "Key",
            "Store"
          ]
        }
      ],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "cap",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "KioskOwnerCap",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000002",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": [
        {
          "NamedTypeParameter": "T"
        }
      ]
    },
    "list": {
      "source_index": 8,
      "index": 8,
      "doc": " List the item by setting a price and making it available for purchase.\n Performs an authorization check to make sure only owner can sell.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": [
            "Key",
            "Store"
          ]
        }
      ],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "cap",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "KioskOwnerCap",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000002",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "price",
          "type_": "u64"
        }
      ],
      "return_": []
    },
    "place_and_list": {
      "source_index": 9,
      "index": 9,
      "doc": " Calls `place` and `list` together - simplifies the flow.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": [
            "Key",
            "Store"
          ]
        }
      ],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "cap",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "KioskOwnerCap",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "item",
          "type_": {
            "NamedTypeParameter": "T"
          }
        },
        {
          "name": "price",
          "type_": "u64"
        }
      ],
      "return_": []
    },
    "delist": {
      "source_index": 10,
      "index": 10,
      "doc": " Remove an existing listing from the `Kiosk` and keep the item in the\n user Kiosk. Can only be performed by the owner of the `Kiosk`.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": [
            "Key",
            "Store"
          ]
        }
      ],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "cap",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "KioskOwnerCap",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000002",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": []
    },
    "purchase": {
      "source_index": 11,
      "index": 11,
      "doc": " Make a trade: pay the owner of the item and request a Transfer to the `target`\n kiosk (to prevent item being taken by the approving party).\n\n Received `TransferRequest` needs to be handled by the publisher of the T,\n if they have a method implemented that allows a trade, it is possible to\n request their approval (by calling some function) so that the trade can be\n finalized.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": [
            "Key",
            "Store"
          ]
        }
      ],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000002",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "payment",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000002",
                "name": "coin"
              },
              "name": "Coin",
              "type_arguments": [
                {
                  "Datatype": {
                    "module": {
                      "address": "0000000000000000000000000000000000000000000000000000000000000002",
                      "name": "sui"
                    },
                    "name": "SUI",
                    "type_arguments": []
                  }
                }
              ]
            }
          }
        }
      ],
      "return_": [
        {
          "NamedTypeParameter": "T"
        },
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000002",
              "name": "transfer_policy"
            },
            "name": "TransferRequest",
            "type_arguments": [
              {
                "NamedTypeParameter": "T"
              }
            ]
          }
        }
      ]
    },
    "list_with_purchase_cap": {
      "source_index": 12,
      "index": 12,
      "doc": " Creates a `PurchaseCap` which gives the right to purchase an item\n for any price equal or higher than the `min_price`.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": [
            "Key",
            "Store"
          ]
        }
      ],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "cap",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "KioskOwnerCap",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000002",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        },
        {
          "name": "min_price",
          "type_": "u64"
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000002",
              "name": "kiosk"
            },
            "name": "PurchaseCap",
            "type_arguments": [
              {
                "NamedTypeParameter": "T"
              }
            ]
          }
        }
      ]
    },
    "purchase_with_cap": {
      "source_index": 13,
      "index": 13,
      "doc": " Unpack the `PurchaseCap` and call `purchase`. Sets the payment amount\n as the price for the listing making sure it's no less than `min_amount`.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": [
            "Key",
            "Store"
          ]
        }
      ],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "purchase_cap",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000002",
                "name": "kiosk"
              },
              "name": "PurchaseCap",
              "type_arguments": [
                {
                  "NamedTypeParameter": "T"
                }
              ]
            }
          }
        },
        {
          "name": "payment",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000002",
                "name": "coin"
              },
              "name": "Coin",
              "type_arguments": [
                {
                  "Datatype": {
                    "module": {
                      "address": "0000000000000000000000000000000000000000000000000000000000000002",
                      "name": "sui"
                    },
                    "name": "SUI",
                    "type_arguments": []
                  }
                }
              ]
            }
          }
        }
      ],
      "return_": [
        {
          "NamedTypeParameter": "T"
        },
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000002",
              "name": "transfer_policy"
            },
            "name": "TransferRequest",
            "type_arguments": [
              {
                "NamedTypeParameter": "T"
              }
            ]
          }
        }
      ]
    },
    "return_purchase_cap": {
      "source_index": 14,
      "index": 14,
      "doc": " Return the `PurchaseCap` without making a purchase; remove an active offer and\n allow the item for taking. Can only be returned to its `Kiosk`, aborts otherwise.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": [
            "Key",
            "Store"
          ]
        }
      ],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "purchase_cap",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000002",
                "name": "kiosk"
              },
              "name": "PurchaseCap",
              "type_arguments": [
                {
                  "NamedTypeParameter": "T"
                }
              ]
            }
          }
        }
      ],
      "return_": []
    },
    "withdraw": {
      "source_index": 15,
      "index": 15,
      "doc": " Withdraw profits from the Kiosk.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "cap",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "KioskOwnerCap",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "amount",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000001",
                "name": "option"
              },
              "name": "Option",
              "type_arguments": [
                "u64"
              ]
            }
          }
        },
        {
          "name": "ctx",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "tx_context"
                  },
                  "name": "TxContext",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000002",
              "name": "coin"
            },
            "name": "Coin",
            "type_arguments": [
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "sui"
                  },
                  "name": "SUI",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ]
    },
    "lock_internal": {
      "source_index": 16,
      "index": 16,
      "doc": " Internal: \"lock\" an item disabling the `take` action.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": [
            "Key",
            "Store"
          ]
        }
      ],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "item",
          "type_": {
            "NamedTypeParameter": "T"
          }
        }
      ],
      "return_": []
    },
    "place_internal": {
      "source_index": 17,
      "index": 17,
      "doc": " Internal: \"place\" an item to the Kiosk and increment the item count.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": [
            "Key",
            "Store"
          ]
        }
      ],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "item",
          "type_": {
            "NamedTypeParameter": "T"
          }
        }
      ],
      "return_": []
    },
    "uid_mut_internal": {
      "source_index": 18,
      "index": 18,
      "doc": " Internal: get a mutable access to the UID.",
      "attributes": [],
      "visibility": "Package",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Reference": [
            true,
            {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "object"
                },
                "name": "UID",
                "type_arguments": []
              }
            }
          ]
        }
      ]
    },
    "has_item": {
      "source_index": 19,
      "index": 19,
      "doc": " Check whether the `item` is present in the `Kiosk`.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000002",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "has_item_with_type": {
      "source_index": 20,
      "index": 20,
      "doc": " Check whether the `item` is present in the `Kiosk` and has type T.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": [
            "Key",
            "Store"
          ]
        }
      ],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000002",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "is_locked": {
      "source_index": 21,
      "index": 21,
      "doc": " Check whether an item with the `id` is locked in the `Kiosk`. Meaning\n that the only two actions that can be performed on it are `list` and\n `list_with_purchase_cap`, it cannot be `take`n out of the `Kiosk`.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000002",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "is_listed": {
      "source_index": 22,
      "index": 22,
      "doc": " Check whether an `item` is listed (exclusively or non exclusively).",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000002",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "is_listed_exclusively": {
      "source_index": 23,
      "index": 23,
      "doc": " Check whether there's a `PurchaseCap` issued for an item.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000002",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "has_access": {
      "source_index": 24,
      "index": 24,
      "doc": " Check whether the `KioskOwnerCap` matches the `Kiosk`.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "cap",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "KioskOwnerCap",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "bool"
      ]
    },
    "uid_mut_as_owner": {
      "source_index": 25,
      "index": 25,
      "doc": " Access the `UID` using the `KioskOwnerCap`.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "cap",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "KioskOwnerCap",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Reference": [
            true,
            {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "object"
                },
                "name": "UID",
                "type_arguments": []
              }
            }
          ]
        }
      ]
    },
    "set_allow_extensions": {
      "source_index": 26,
      "index": 26,
      "doc": " [DEPRECATED]\n Allow or disallow `uid` and `uid_mut` access via the `allow_extensions`\n setting.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "cap",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "KioskOwnerCap",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "allow_extensions",
          "type_": "bool"
        }
      ],
      "return_": []
    },
    "uid": {
      "source_index": 27,
      "index": 27,
      "doc": " Get the immutable `UID` for dynamic field access.\n Always enabled.\n\n Given the &UID can be used for reading keys and authorization,\n its access",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Reference": [
            false,
            {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "object"
                },
                "name": "UID",
                "type_arguments": []
              }
            }
          ]
        }
      ]
    },
    "uid_mut": {
      "source_index": 28,
      "index": 28,
      "doc": " Get the mutable `UID` for dynamic field access and extensions.\n Aborts if `allow_extensions` set to `false`.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Reference": [
            true,
            {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "object"
                },
                "name": "UID",
                "type_arguments": []
              }
            }
          ]
        }
      ]
    },
    "owner": {
      "source_index": 29,
      "index": 29,
      "doc": " Get the owner of the Kiosk.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "address"
      ]
    },
    "item_count": {
      "source_index": 30,
      "index": 30,
      "doc": " Get the number of items stored in a Kiosk.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "u32"
      ]
    },
    "profits_amount": {
      "source_index": 31,
      "index": 31,
      "doc": " Get the amount of profits collected by selling items.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "u64"
      ]
    },
    "profits_mut": {
      "source_index": 32,
      "index": 32,
      "doc": " Get mutable access to `profits` - owner only action.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "cap",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "KioskOwnerCap",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Reference": [
            true,
            {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "balance"
                },
                "name": "Balance",
                "type_arguments": [
                  {
                    "Datatype": {
                      "module": {
                        "address": "0000000000000000000000000000000000000000000000000000000000000002",
                        "name": "sui"
                      },
                      "name": "SUI",
                      "type_arguments": []
                    }
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "borrow": {
      "source_index": 33,
      "index": 33,
      "doc": " Immutably borrow an item from the `Kiosk`. Any item can be `borrow`ed\n at any time.",
      "attributes": [
        {
          "Parameterized": [
            "syntax",
            [
              {
                "Name": "index"
              }
            ]
          ]
        }
      ],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": [
            "Key",
            "Store"
          ]
        }
      ],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "cap",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "KioskOwnerCap",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000002",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": [
        {
          "Reference": [
            false,
            {
              "NamedTypeParameter": "T"
            }
          ]
        }
      ]
    },
    "borrow_mut": {
      "source_index": 34,
      "index": 34,
      "doc": " Mutably borrow an item from the `Kiosk`.\n Item can be `borrow_mut`ed only if it's not `is_listed`.",
      "attributes": [
        {
          "Parameterized": [
            "syntax",
            [
              {
                "Name": "index"
              }
            ]
          ]
        }
      ],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": [
            "Key",
            "Store"
          ]
        }
      ],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "cap",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "KioskOwnerCap",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000002",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": [
        {
          "Reference": [
            true,
            {
              "NamedTypeParameter": "T"
            }
          ]
        }
      ]
    },
    "borrow_val": {
      "source_index": 35,
      "index": 35,
      "doc": " Take the item from the `Kiosk` with a guarantee that it will be returned.\n Item can be `borrow_val`-ed only if it's not `is_listed`.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": [
            "Key",
            "Store"
          ]
        }
      ],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "cap",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "KioskOwnerCap",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "id",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000002",
                "name": "object"
              },
              "name": "ID",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": [
        {
          "NamedTypeParameter": "T"
        },
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000002",
              "name": "kiosk"
            },
            "name": "Borrow",
            "type_arguments": []
          }
        }
      ]
    },
    "return_val": {
      "source_index": 36,
      "index": 36,
      "doc": " Return the borrowed item to the `Kiosk`. This method cannot be avoided\n if `borrow_val` is used.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": [
            "Key",
            "Store"
          ]
        }
      ],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              true,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "Kiosk",
                  "type_arguments": []
                }
              }
            ]
          }
        },
        {
          "name": "item",
          "type_": {
            "NamedTypeParameter": "T"
          }
        },
        {
          "name": "borrow",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000002",
                "name": "kiosk"
              },
              "name": "Borrow",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": []
    },
    "kiosk_owner_cap_for": {
      "source_index": 37,
      "index": 37,
      "doc": " Get the `for` field of the `KioskOwnerCap`.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "cap",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "KioskOwnerCap",
                  "type_arguments": []
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000002",
              "name": "object"
            },
            "name": "ID",
            "type_arguments": []
          }
        }
      ]
    },
    "purchase_cap_kiosk": {
      "source_index": 38,
      "index": 38,
      "doc": " Get the `kiosk_id` from the `PurchaseCap`.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": [
            "Key",
            "Store"
          ]
        }
      ],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "PurchaseCap",
                  "type_arguments": [
                    {
                      "NamedTypeParameter": "T"
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000002",
              "name": "object"
            },
            "name": "ID",
            "type_arguments": []
          }
        }
      ]
    },
    "purchase_cap_item": {
      "source_index": 39,
      "index": 39,
      "doc": " Get the `Item_id` from the `PurchaseCap`.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": [
            "Key",
            "Store"
          ]
        }
      ],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "PurchaseCap",
                  "type_arguments": [
                    {
                      "NamedTypeParameter": "T"
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000002",
              "name": "object"
            },
            "name": "ID",
            "type_arguments": []
          }
        }
      ]
    },
    "purchase_cap_min_price": {
      "source_index": 40,
      "index": 40,
      "doc": " Get the `min_price` from the `PurchaseCap`.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [
        {
          "name": "T",
          "constraints": [
            "Key",
            "Store"
          ]
        }
      ],
      "parameters": [
        {
          "name": "self",
          "type_": {
            "Reference": [
              false,
              {
                "Datatype": {
                  "module": {
                    "address": "0000000000000000000000000000000000000000000000000000000000000002",
                    "name": "kiosk"
                  },
                  "name": "PurchaseCap",
                  "type_arguments": [
                    {
                      "NamedTypeParameter": "T"
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "return_": [
        "u64"
      ]
    }
  },
  "structs": {
    "Kiosk": {
      "index": 0,
      "doc": " An object which allows selling collectibles within \"kiosk\" ecosystem.\n By default gives the functionality to list an item openly - for anyone\n to purchase providing the guarantees for creators that every transfer\n needs to be approved via the `TransferPolicy`.",
      "attributes": [],
      "abilities": [
        "Key",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "id": {
            "index": 0,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "object"
                },
                "name": "UID",
                "type_arguments": []
              }
            }
          },
          "profits": {
            "index": 1,
            "doc": " Balance of the Kiosk - all profits from sales go here.",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "balance"
                },
                "name": "Balance",
                "type_arguments": [
                  {
                    "Datatype": {
                      "module": {
                        "address": "0000000000000000000000000000000000000000000000000000000000000002",
                        "name": "sui"
                      },
                      "name": "SUI",
                      "type_arguments": []
                    }
                  }
                ]
              }
            }
          },
          "owner": {
            "index": 2,
            "doc": " Always point to `sender` of the transaction.\n Can be changed by calling `set_owner` with Cap.",
            "type_": "address"
          },
          "item_count": {
            "index": 3,
            "doc": " Number of items stored in a Kiosk. Used to allow unpacking\n an empty Kiosk if it was wrapped or has a single owner.",
            "type_": "u32"
          },
          "allow_extensions": {
            "index": 4,
            "doc": " [DEPRECATED] Please, don't use the `allow_extensions` and the matching\n `set_allow_extensions` function - it is a legacy feature that is being\n replaced by the `kiosk_extension` module and its Extensions API.\n\n Exposes `uid_mut` publicly when set to `true`, set to `false` by default.",
            "type_": "bool"
          }
        }
      }
    },
    "KioskOwnerCap": {
      "index": 1,
      "doc": " A Capability granting the bearer a right to `place` and `take` items\n from the `Kiosk` as well as to `list` them and `list_with_purchase_cap`.",
      "attributes": [],
      "abilities": [
        "Key",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "id": {
            "index": 0,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "object"
                },
                "name": "UID",
                "type_arguments": []
              }
            }
          },
          "for": {
            "index": 1,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "PurchaseCap": {
      "index": 2,
      "doc": " A capability which locks an item and gives a permission to\n purchase it from a `Kiosk` for any price no less than `min_price`.\n\n Allows exclusive listing: only bearer of the `PurchaseCap` can\n purchase the asset. However, the capability should be used\n carefully as losing it would lock the asset in the `Kiosk`.\n\n The main application for the `PurchaseCap` is building extensions\n on top of the `Kiosk`.",
      "attributes": [],
      "abilities": [
        "Key",
        "Store"
      ],
      "type_parameters": [
        {
          "phantom": true,
          "name": "T",
          "constraints": [
            "Key",
            "Store"
          ]
        }
      ],
      "fields": {
        "positional_fields": false,
        "fields": {
          "id": {
            "index": 0,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "object"
                },
                "name": "UID",
                "type_arguments": []
              }
            }
          },
          "kiosk_id": {
            "index": 1,
            "doc": " ID of the `Kiosk` the cap belongs to.",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "item_id": {
            "index": 2,
            "doc": " ID of the listed item.",
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "min_price": {
            "index": 3,
            "doc": " Minimum price for which the item can be purchased.",
            "type_": "u64"
          }
        }
      }
    },
    "Borrow": {
      "index": 3,
      "doc": " Hot potato to ensure an item was returned after being taken using\n the `borrow_val` call.",
      "attributes": [],
      "abilities": [],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "kiosk_id": {
            "index": 0,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "item_id": {
            "index": 1,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "Item": {
      "index": 4,
      "doc": " Dynamic field key for an item placed into the kiosk.",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "id": {
            "index": 0,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "Listing": {
      "index": 5,
      "doc": " Dynamic field key for an active offer to purchase the T. If an\n item is listed without a `PurchaseCap`, exclusive is set to `false`.",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "id": {
            "index": 0,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "is_exclusive": {
            "index": 1,
            "doc": null,
            "type_": "bool"
          }
        }
      }
    },
    "Lock": {
      "index": 6,
      "doc": " Dynamic field key which marks that an item is locked in the `Kiosk` and\n can't be `take`n. The item then can only be listed / sold via the PurchaseCap.\n Lock is released on `purchase`.",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "id": {
            "index": 0,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    },
    "ItemListed": {
      "index": 7,
      "doc": " Emitted when an item was listed by the safe owner. Can be used\n to track available offers anywhere on the network; the event is\n type-indexed which allows for searching for offers of a specific `T`",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop"
      ],
      "type_parameters": [
        {
          "phantom": true,
          "name": "T",
          "constraints": [
            "Key",
            "Store"
          ]
        }
      ],
      "fields": {
        "positional_fields": false,
        "fields": {
          "kiosk": {
            "index": 0,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "id": {
            "index": 1,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "price": {
            "index": 2,
            "doc": null,
            "type_": "u64"
          }
        }
      }
    },
    "ItemPurchased": {
      "index": 8,
      "doc": " Emitted when an item was purchased from the `Kiosk`. Can be used\n to track finalized sales across the network. The event is emitted\n in both cases: when an item is purchased via the `PurchaseCap` or\n when it's purchased directly (via `list` + `purchase`).\n\n The `price` is also emitted and might differ from the `price` set\n in the `ItemListed` event. This is because the `PurchaseCap` only\n sets a minimum price for the item, and the actual price is defined\n by the trading module / extension.",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop"
      ],
      "type_parameters": [
        {
          "phantom": true,
          "name": "T",
          "constraints": [
            "Key",
            "Store"
          ]
        }
      ],
      "fields": {
        "positional_fields": false,
        "fields": {
          "kiosk": {
            "index": 0,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "id": {
            "index": 1,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "price": {
            "index": 2,
            "doc": null,
            "type_": "u64"
          }
        }
      }
    },
    "ItemDelisted": {
      "index": 9,
      "doc": " Emitted when an item was delisted by the safe owner. Can be used\n to close tracked offers.",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop"
      ],
      "type_parameters": [
        {
          "phantom": true,
          "name": "T",
          "constraints": [
            "Key",
            "Store"
          ]
        }
      ],
      "fields": {
        "positional_fields": false,
        "fields": {
          "kiosk": {
            "index": 0,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          },
          "id": {
            "index": 1,
            "doc": null,
            "type_": {
              "Datatype": {
                "module": {
                  "address": "0000000000000000000000000000000000000000000000000000000000000002",
                  "name": "object"
                },
                "name": "ID",
                "type_arguments": []
              }
            }
          }
        }
      }
    }
  },
  "enums": {}
}