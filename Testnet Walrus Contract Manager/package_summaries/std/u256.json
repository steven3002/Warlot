{
  "doc": null,
  "immediate_dependencies": [
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000001",
      "name": "option"
    },
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000001",
      "name": "string"
    },
    {
      "address": "0000000000000000000000000000000000000000000000000000000000000001",
      "name": "vector"
    }
  ],
  "attributes": [
    {
      "Parameterized": [
        "defines_primitive",
        [
          {
            "Name": "u256"
          }
        ]
      ]
    }
  ],
  "functions": {
    "bitwise_not": {
      "source_index": 0,
      "index": 0,
      "doc": " Returns the bitwise not of the value.\n Each bit that is 1 becomes 0. Each bit that is 0 becomes 1.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "x",
          "type_": "u256"
        }
      ],
      "return_": [
        "u256"
      ]
    },
    "max": {
      "source_index": 1,
      "index": 1,
      "doc": " Return the larger of `x` and `y`",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "x",
          "type_": "u256"
        },
        {
          "name": "y",
          "type_": "u256"
        }
      ],
      "return_": [
        "u256"
      ]
    },
    "min": {
      "source_index": 2,
      "index": 2,
      "doc": " Return the smaller of `x` and `y`",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "x",
          "type_": "u256"
        },
        {
          "name": "y",
          "type_": "u256"
        }
      ],
      "return_": [
        "u256"
      ]
    },
    "diff": {
      "source_index": 3,
      "index": 3,
      "doc": " Return the absolute value of x - y",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "x",
          "type_": "u256"
        },
        {
          "name": "y",
          "type_": "u256"
        }
      ],
      "return_": [
        "u256"
      ]
    },
    "divide_and_round_up": {
      "source_index": 4,
      "index": 4,
      "doc": " Calculate x / y, but round up the result.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "x",
          "type_": "u256"
        },
        {
          "name": "y",
          "type_": "u256"
        }
      ],
      "return_": [
        "u256"
      ]
    },
    "pow": {
      "source_index": 5,
      "index": 5,
      "doc": " Return the value of a base raised to a power",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "base",
          "type_": "u256"
        },
        {
          "name": "exponent",
          "type_": "u8"
        }
      ],
      "return_": [
        "u256"
      ]
    },
    "try_as_u8": {
      "source_index": 6,
      "index": 6,
      "doc": " Try to convert a `u256` to a `u8`. Returns `None` if the value is too large.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "x",
          "type_": "u256"
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000001",
              "name": "option"
            },
            "name": "Option",
            "type_arguments": [
              "u8"
            ]
          }
        }
      ]
    },
    "try_as_u16": {
      "source_index": 7,
      "index": 7,
      "doc": " Try to convert a `u256` to a `u16`. Returns `None` if the value is too large.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "x",
          "type_": "u256"
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000001",
              "name": "option"
            },
            "name": "Option",
            "type_arguments": [
              "u16"
            ]
          }
        }
      ]
    },
    "try_as_u32": {
      "source_index": 8,
      "index": 8,
      "doc": " Try to convert a `u256` to a `u32`. Returns `None` if the value is too large.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "x",
          "type_": "u256"
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000001",
              "name": "option"
            },
            "name": "Option",
            "type_arguments": [
              "u32"
            ]
          }
        }
      ]
    },
    "try_as_u64": {
      "source_index": 9,
      "index": 9,
      "doc": " Try to convert a `u256` to a `u64`. Returns `None` if the value is too large.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "x",
          "type_": "u256"
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000001",
              "name": "option"
            },
            "name": "Option",
            "type_arguments": [
              "u64"
            ]
          }
        }
      ]
    },
    "try_as_u128": {
      "source_index": 10,
      "index": 10,
      "doc": " Try to convert a `u256` to a `u128`. Returns `None` if the value is too large.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "x",
          "type_": "u256"
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000001",
              "name": "option"
            },
            "name": "Option",
            "type_arguments": [
              "u128"
            ]
          }
        }
      ]
    },
    "to_string": {
      "source_index": 11,
      "index": 11,
      "doc": null,
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "x",
          "type_": "u256"
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000001",
              "name": "string"
            },
            "name": "String",
            "type_arguments": []
          }
        }
      ]
    },
    "do": {
      "source_index": 15,
      "index": 18446744073709551615,
      "doc": " Loops applying `$f` to each number from `0` to `$stop` (exclusive)",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "macro_": true,
      "type_parameters": [
        {
          "name": "$R",
          "constraints": [
            "Drop"
          ]
        }
      ],
      "parameters": [
        {
          "name": "$stop",
          "type_": "u256"
        },
        {
          "name": "$f",
          "type_": {
            "fun": [
              [
                "u256"
              ],
              {
                "NamedTypeParameter": "$R"
              }
            ]
          }
        }
      ],
      "return_": []
    },
    "do_eq": {
      "source_index": 16,
      "index": 18446744073709551615,
      "doc": " Loops applying `$f` to each number from `0` to `$stop` (inclusive)",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "macro_": true,
      "type_parameters": [
        {
          "name": "$R",
          "constraints": [
            "Drop"
          ]
        }
      ],
      "parameters": [
        {
          "name": "$stop",
          "type_": "u256"
        },
        {
          "name": "$f",
          "type_": {
            "fun": [
              [
                "u256"
              ],
              {
                "NamedTypeParameter": "$R"
              }
            ]
          }
        }
      ],
      "return_": []
    },
    "max_value": {
      "source_index": 12,
      "index": 18446744073709551615,
      "doc": " Maximum value for a `u256`",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "macro_": true,
      "type_parameters": [],
      "parameters": [],
      "return_": [
        "u256"
      ]
    },
    "range_do": {
      "source_index": 13,
      "index": 18446744073709551615,
      "doc": " Loops applying `$f` to each number from `$start` to `$stop` (exclusive)",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "macro_": true,
      "type_parameters": [
        {
          "name": "$R",
          "constraints": [
            "Drop"
          ]
        }
      ],
      "parameters": [
        {
          "name": "$start",
          "type_": "u256"
        },
        {
          "name": "$stop",
          "type_": "u256"
        },
        {
          "name": "$f",
          "type_": {
            "fun": [
              [
                "u256"
              ],
              {
                "NamedTypeParameter": "$R"
              }
            ]
          }
        }
      ],
      "return_": []
    },
    "range_do_eq": {
      "source_index": 14,
      "index": 18446744073709551615,
      "doc": " Loops applying `$f` to each number from `$start` to `$stop` (inclusive)",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "macro_": true,
      "type_parameters": [
        {
          "name": "$R",
          "constraints": [
            "Drop"
          ]
        }
      ],
      "parameters": [
        {
          "name": "$start",
          "type_": "u256"
        },
        {
          "name": "$stop",
          "type_": "u256"
        },
        {
          "name": "$f",
          "type_": {
            "fun": [
              [
                "u256"
              ],
              {
                "NamedTypeParameter": "$R"
              }
            ]
          }
        }
      ],
      "return_": []
    }
  },
  "structs": {},
  "enums": {}
}