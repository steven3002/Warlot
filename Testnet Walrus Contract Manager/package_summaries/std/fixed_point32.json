{
  "doc": " Defines a fixed-point numeric type with a 32-bit integer part and\n a 32-bit fractional part.",
  "immediate_dependencies": [],
  "attributes": [
    {
      "Parameterized": [
        "deprecated",
        [
          {
            "Assigned": [
              "note",
              "Use `std::uq32_32` instead. If you need to convert from a `FixedPoint32` to a `UQ32_32`, you can use the `std::fixed_point32::get_raw_value` with `std::uq32_32::from_raw_value`."
            ]
          }
        ]
      ]
    }
  ],
  "functions": {
    "multiply_u64": {
      "source_index": 0,
      "index": 0,
      "doc": " Multiply a u64 integer by a fixed-point number, truncating any\n fractional part of the product. This will abort if the product\n overflows.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "val",
          "type_": "u64"
        },
        {
          "name": "multiplier",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000001",
                "name": "fixed_point32"
              },
              "name": "FixedPoint32",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": [
        "u64"
      ]
    },
    "divide_u64": {
      "source_index": 1,
      "index": 1,
      "doc": " Divide a u64 integer by a fixed-point number, truncating any\n fractional part of the quotient. This will abort if the divisor\n is zero or if the quotient overflows.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "val",
          "type_": "u64"
        },
        {
          "name": "divisor",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000001",
                "name": "fixed_point32"
              },
              "name": "FixedPoint32",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": [
        "u64"
      ]
    },
    "create_from_rational": {
      "source_index": 2,
      "index": 2,
      "doc": " Create a fixed-point value from a rational number specified by its\n numerator and denominator. Calling this function should be preferred\n for using `Self::create_from_raw_value` which is also available.\n This will abort if the denominator is zero. It will also\n abort if the numerator is nonzero and the ratio is not in the range\n 2^-32 .. 2^32-1. When specifying decimal fractions, be careful about\n rounding errors: if you round to display N digits after the decimal\n point, you can use a denominator of 10^N to avoid numbers where the\n very small imprecision in the binary representation could change the\n rounding, e.g., 0.0125 will round down to 0.012 instead of up to 0.013.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "numerator",
          "type_": "u64"
        },
        {
          "name": "denominator",
          "type_": "u64"
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000001",
              "name": "fixed_point32"
            },
            "name": "FixedPoint32",
            "type_arguments": []
          }
        }
      ]
    },
    "create_from_raw_value": {
      "source_index": 3,
      "index": 3,
      "doc": " Create a fixedpoint value from a raw value.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "value",
          "type_": "u64"
        }
      ],
      "return_": [
        {
          "Datatype": {
            "module": {
              "address": "0000000000000000000000000000000000000000000000000000000000000001",
              "name": "fixed_point32"
            },
            "name": "FixedPoint32",
            "type_arguments": []
          }
        }
      ]
    },
    "get_raw_value": {
      "source_index": 4,
      "index": 4,
      "doc": " Accessor for the raw u64 value. Other less common operations, such as\n adding or subtracting FixedPoint32 values, can be done using the raw\n values directly.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "num",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000001",
                "name": "fixed_point32"
              },
              "name": "FixedPoint32",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": [
        "u64"
      ]
    },
    "is_zero": {
      "source_index": 5,
      "index": 5,
      "doc": " Returns true if the ratio is zero.",
      "attributes": [],
      "visibility": "Public",
      "entry": false,
      "type_parameters": [],
      "parameters": [
        {
          "name": "num",
          "type_": {
            "Datatype": {
              "module": {
                "address": "0000000000000000000000000000000000000000000000000000000000000001",
                "name": "fixed_point32"
              },
              "name": "FixedPoint32",
              "type_arguments": []
            }
          }
        }
      ],
      "return_": [
        "bool"
      ]
    }
  },
  "structs": {
    "FixedPoint32": {
      "index": 0,
      "doc": " Define a fixed-point numeric type with 32 fractional bits.\n This is just a u64 integer but it is wrapped in a struct to\n make a unique type. This is a binary representation, so decimal\n values may not be exactly representable, but it provides more\n than 9 decimal digits of precision both before and after the\n decimal point (18 digits total). For comparison, double precision\n floating-point has less than 16 decimal digits of precision, so\n be careful about using floating-point to convert these values to\n decimal.",
      "attributes": [],
      "abilities": [
        "Copy",
        "Drop",
        "Store"
      ],
      "type_parameters": [],
      "fields": {
        "positional_fields": false,
        "fields": {
          "value": {
            "index": 0,
            "doc": null,
            "type_": "u64"
          }
        }
      }
    }
  },
  "enums": {}
}